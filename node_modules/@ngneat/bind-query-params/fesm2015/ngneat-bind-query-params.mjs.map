{"version":3,"file":"ngneat-bind-query-params.mjs","sources":["../../../../projects/ngneat/bind-query-params/src/lib/options.ts","../../../../projects/ngneat/bind-query-params/src/lib/utils.ts","../../../../projects/ngneat/bind-query-params/src/lib/QueryParamDef.ts","../../../../projects/ngneat/bind-query-params/src/lib/BindQueryParamsManager.ts","../../../../projects/ngneat/bind-query-params/src/lib/BindQueryParamsFactory.ts","../../../../projects/ngneat/bind-query-params/src/ngneat-bind-query-params.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const BIND_QUERY_PARAMS_OPTIONS = new InjectionToken('BIND_QUERY_PARAMS_OPTIONS', {\n  providedIn: 'root',\n  factory() {\n    return {\n      windowRef: window,\n    };\n  },\n});\n","import { AbstractControl } from '@angular/forms';\nimport { ParamDefType, ResolveParamsOption } from './types';\nimport { QueryParamDef } from './QueryParamDef';\n\nfunction isEmptyValue(def: QueryParamDef, value: any) {\n  switch (def.type) {\n    case 'array':\n      return !value || !value.length;\n    case 'object':\n      return !value || !Object.keys(value).length;\n    case 'string':\n      return !value || value === '';\n    default:\n      return false;\n  }\n}\n\nexport function parse(value: any, type: ParamDefType) {\n  switch (type) {\n    case 'string':\n      return value;\n    case 'boolean':\n      return value === 'false' ? false : !!value;\n    case 'array':\n      return value?.split(',');\n    case 'number':\n      return +value;\n    case 'object':\n      return JSON.parse(value);\n    default:\n      return value;\n  }\n}\n\nexport function get(obj: Record<string, any>, path: string): any {\n  let current = obj;\n  path.split('.').forEach((p) => (current = current[p]));\n\n  return current;\n}\n\nexport function resolveParams(params: ResolveParamsOption | ResolveParamsOption[]) {\n  const toArray = coerceArray(params);\n\n  const result: Record<string, string | null> = {};\n\n  toArray.forEach(({ def, value }) => {\n    let defValue: string | null;\n\n    if (def.removeEmptyValue) {\n      defValue = isEmptyValue(def, value) ? null : def.serialize(value);\n    } else {\n      defValue = def.serialize(value);\n    }\n\n    result[def.queryKey] = defValue;\n  });\n\n  return result;\n}\n\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function defsToParams(defs: QueryParamDef[], group: AbstractControl) {\n  return defs.map((def) => {\n    return {\n      queryKey: def.queryKey,\n      value: group.get(def.path)!.value,\n    };\n  });\n}\n","import { QueryDefOptions } from './types';\nimport { parse } from './utils';\n\nexport class QueryParamDef<QueryParams = any> {\n  constructor(private config: QueryDefOptions<QueryParams>) {\n  }\n\n  get queryKey() {\n    return this.config.queryKey;\n  }\n\n  get path() {\n    return this.config.path || this.queryKey;\n  }\n\n  get type() {\n    return this.config.type || 'string';\n  }\n\n  get parser() {\n    return this.config.parser;\n  }\n\n  get syncInitialControlValue() {\n    return this.config.syncInitialControlValue;\n  }\n\n  get syncInitialQueryParamValue() {\n    return this.config.syncInitialQueryParamValue ?? true;\n  }\n\n  get serializer() {\n    return this.config.serializer;\n  }\n\n  get removeEmptyValue() {\n    return this.config.removeEmptyValue === undefined ? true : this.config.removeEmptyValue;\n  }\n\n  serialize(controlValue: any): string | null {\n    if(this.serializer) {\n      return this.serializer(controlValue);\n    }\n\n    if(controlValue === null || controlValue === undefined || controlValue === '') {\n      return null;\n    }\n\n    const serializedValue = controlValue.toString();\n\n    return serializedValue === '[object Object]' ? JSON.stringify(controlValue) : serializedValue;\n  }\n\n  parse(queryParamValue: string) {\n    if(this.parser) {\n      return this.parser(queryParamValue);\n    }\n\n    return parse(queryParamValue, this.type);\n  }\n}\n","import { FormGroup } from '@angular/forms';\nimport { merge, Subject } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { coerceArray, get, resolveParams } from './utils';\nimport { auditTime, map, takeUntil } from 'rxjs/operators';\nimport { BindQueryParamsOptions, QueryDefOptions, ResolveParamsOption, SyncDefsOptions } from './types';\nimport { QueryParamDef } from './QueryParamDef';\nimport set from 'lodash.set';\n\nexport class BindQueryParamsManager<T = any> {\n  private defs: QueryParamDef<T>[];\n  private group!: FormGroup;\n  private $destroy = new Subject();\n  private defsSynced: Record<keyof T, boolean> = {} as Record<keyof T, boolean>;\n\n  connect(group: FormGroup) {\n    this.group = group;\n    this.onInit();\n    return this;\n  }\n\n  constructor(\n    private router: Router,\n    defs: QueryDefOptions<T>[] | QueryDefOptions<T>,\n    private options: BindQueryParamsOptions,\n    private createOptions?: Pick<QueryDefOptions, 'syncInitialControlValue' | 'syncInitialQueryParamValue'>\n  ) {\n    this.defs = coerceArray(defs).map((def) => new QueryParamDef(def));\n  }\n\n  onInit() {\n    this.handleInitialURLSync();\n\n    this.updateControl(\n      this.defs,\n      { emitEvent: true },\n      (def) => !!(def.syncInitialQueryParamValue ?? this.createOptions?.syncInitialQueryParamValue)\n    );\n\n    const controls = this.defs.map((def) => {\n      return this.group.get(def.path)!.valueChanges.pipe(\n        map((value) => ({\n          def,\n          value,\n        }))\n      );\n    });\n\n    // Could be a several changes in the same tick,\n    // for example when we use reset() or patchValue.\n    // We need to aggregate the changes and apply them once\n    // because the router navigates in micro task\n    let buffer: ResolveParamsOption[] = [];\n\n    merge(...controls)\n      .pipe(\n        map((result) => buffer.push(result)),\n        auditTime(0),\n        takeUntil(this.$destroy)\n      )\n      .subscribe(() => {\n        this.updateQueryParams(resolveParams(buffer));\n        buffer = [];\n      });\n  }\n\n  destroy() {\n    this.$destroy.next();\n  }\n\n  getDef(queryKey: keyof T) {\n    return this.defs.find((def) => def.queryKey === queryKey);\n  }\n\n  parse(queryParams: Partial<T>) {\n    const result: Record<string, unknown> = {};\n\n    for (const [key, value] of Object.entries(queryParams)) {\n      const def = this.getDef(key as keyof T);\n\n      if (def) {\n        result[key] = def.parse(value as string);\n      }\n    }\n\n    return result;\n  }\n\n  syncAllDefs(options: SyncDefsOptions = { emitEvent: true }) {\n    const allKeys = this.defs.map((def) => def.queryKey);\n    this.syncDefs(allKeys, options);\n  }\n\n  syncDefs(queryKeys: (keyof T & string) | (keyof T & string)[], options: SyncDefsOptions = { emitEvent: true }) {\n    const defs: QueryParamDef<T>[] = [];\n\n    coerceArray(queryKeys).forEach((key) => {\n      if (!this.defsSynced[key]) {\n        this.defsSynced[key] = true;\n        const def = this.getDef(key as keyof T);\n\n        if (def) {\n          defs.push(def);\n        }\n      }\n    });\n\n    if (defs.length) {\n      this.updateControl(defs, options);\n    }\n  }\n\n  paramExists(queryKey: keyof T): boolean {\n    return this.search.has(queryKey as string);\n  }\n\n  someParamExists(): boolean {\n    return this.defs.some((def) => {\n      return this.search.has(def.queryKey);\n    });\n  }\n\n  get search() {\n    return new URLSearchParams(this.options.windowRef.location.search);\n  }\n\n  private handleInitialURLSync() {\n    const initialSyncDefs: Parameters<typeof resolveParams>[0] = [];\n\n    for (const def of this.defs) {\n      const syncInitialControlValue = def.syncInitialControlValue ?? this.createOptions?.syncInitialControlValue;\n\n      if (syncInitialControlValue && !this.paramExists(def.queryKey)) {\n        initialSyncDefs.push({ def, value: get(this.group.value, def.path) });\n      }\n    }\n\n    if (initialSyncDefs.length) {\n      this.updateQueryParams({\n        // The router doesn't know the current query params so\n        // we need to add it manually\n        ...Object.fromEntries(this.search as any),\n        ...resolveParams(initialSyncDefs),\n      });\n    }\n  }\n\n  private updateQueryParams(queryParams: object) {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      replaceUrl: true,\n    });\n  }\n\n  private updateControl(\n    defs: QueryParamDef[],\n    options: { emitEvent: boolean },\n    updatePredicate = (_: QueryParamDef) => true\n  ) {\n    const queryParams = new URLSearchParams(this.options.windowRef.location.search);\n    let value: Partial<T> = {};\n\n    for (const def of defs) {\n      if (updatePredicate(def)) {\n        const { queryKey } = def;\n        const queryParamValue = queryParams.get(queryKey);\n\n        if (!queryParamValue) continue;\n\n        set(value, def.path.split('.'), def.parse(queryParamValue));\n      }\n    }\n\n    if (Object.keys(value).length) {\n      this.group.patchValue(value, options);\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BindQueryParamsManager } from './BindQueryParamsManager';\nimport { BIND_QUERY_PARAMS_OPTIONS } from './options';\nimport { BindQueryParamsOptions, QueryDefOptions } from './types';\n\n@Injectable({ providedIn: 'root' })\nexport class BindQueryParamsFactory {\n  constructor(private router: Router, @Inject(BIND_QUERY_PARAMS_OPTIONS) private options: BindQueryParamsOptions) {}\n\n  create<T>(\n    defs: QueryDefOptions<T>[] | QueryDefOptions<T>,\n    createOptions?: Pick<QueryDefOptions, 'syncInitialControlValue' | 'syncInitialQueryParamValue'>\n  ): BindQueryParamsManager<T> {\n    return new BindQueryParamsManager<T>(this.router, defs, this.options, createOptions);\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}