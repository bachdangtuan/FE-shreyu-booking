function isEmptyValue(def, value) {
    switch (def.type) {
        case 'array':
            return !value || !value.length;
        case 'object':
            return !value || !Object.keys(value).length;
        case 'string':
            return !value || value === '';
        default:
            return false;
    }
}
export function parse(value, type) {
    switch (type) {
        case 'string':
            return value;
        case 'boolean':
            return value === 'false' ? false : !!value;
        case 'array':
            return value?.split(',');
        case 'number':
            return +value;
        case 'object':
            return JSON.parse(value);
        default:
            return value;
    }
}
export function get(obj, path) {
    let current = obj;
    path.split('.').forEach((p) => (current = current[p]));
    return current;
}
export function resolveParams(params) {
    const toArray = coerceArray(params);
    const result = {};
    toArray.forEach(({ def, value }) => {
        let defValue;
        if (def.removeEmptyValue) {
            defValue = isEmptyValue(def, value) ? null : def.serialize(value);
        }
        else {
            defValue = def.serialize(value);
        }
        result[def.queryKey] = defValue;
    });
    return result;
}
export function coerceArray(value) {
    return Array.isArray(value) ? value : [value];
}
export function defsToParams(defs, group) {
    return defs.map((def) => {
        return {
            queryKey: def.queryKey,
            value: group.get(def.path).value,
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ25lYXQvYmluZC1xdWVyeS1wYXJhbXMvc3JjL2xpYi91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxTQUFTLFlBQVksQ0FBQyxHQUFrQixFQUFFLEtBQVU7SUFDbEQsUUFBUSxHQUFHLENBQUMsSUFBSSxFQUFFO1FBQ2hCLEtBQUssT0FBTztZQUNWLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ2pDLEtBQUssUUFBUTtZQUNYLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUM5QyxLQUFLLFFBQVE7WUFDWCxPQUFPLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxFQUFFLENBQUM7UUFDaEM7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsS0FBSyxDQUFDLEtBQVUsRUFBRSxJQUFrQjtJQUNsRCxRQUFRLElBQUksRUFBRTtRQUNaLEtBQUssUUFBUTtZQUNYLE9BQU8sS0FBSyxDQUFDO1FBQ2YsS0FBSyxTQUFTO1lBQ1osT0FBTyxLQUFLLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDN0MsS0FBSyxPQUFPO1lBQ1YsT0FBTyxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLEtBQUssUUFBUTtZQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDaEIsS0FBSyxRQUFRO1lBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCO1lBQ0UsT0FBTyxLQUFLLENBQUM7S0FDaEI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUF3QixFQUFFLElBQVk7SUFDeEQsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDO0lBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXZELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLE1BQW1EO0lBQy9FLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwQyxNQUFNLE1BQU0sR0FBa0MsRUFBRSxDQUFDO0lBRWpELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ2pDLElBQUksUUFBdUIsQ0FBQztRQUU1QixJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4QixRQUFRLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25FO2FBQU07WUFDTCxRQUFRLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQztRQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUksS0FBYztJQUMzQyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFxQixFQUFFLEtBQXNCO0lBQ3hFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ3RCLE9BQU87WUFDTCxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVE7WUFDdEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBRSxDQUFDLEtBQUs7U0FDbEMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFBhcmFtRGVmVHlwZSwgUmVzb2x2ZVBhcmFtc09wdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgUXVlcnlQYXJhbURlZiB9IGZyb20gJy4vUXVlcnlQYXJhbURlZic7XG5cbmZ1bmN0aW9uIGlzRW1wdHlWYWx1ZShkZWY6IFF1ZXJ5UGFyYW1EZWYsIHZhbHVlOiBhbnkpIHtcbiAgc3dpdGNoIChkZWYudHlwZSkge1xuICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIHJldHVybiAhdmFsdWUgfHwgIXZhbHVlLmxlbmd0aDtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuICF2YWx1ZSB8fCAhT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aDtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZSA9PT0gJyc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UodmFsdWU6IGFueSwgdHlwZTogUGFyYW1EZWZUeXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gdmFsdWUgPT09ICdmYWxzZScgPyBmYWxzZSA6ICEhdmFsdWU7XG4gICAgY2FzZSAnYXJyYXknOlxuICAgICAgcmV0dXJuIHZhbHVlPy5zcGxpdCgnLCcpO1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG9iajogUmVjb3JkPHN0cmluZywgYW55PiwgcGF0aDogc3RyaW5nKTogYW55IHtcbiAgbGV0IGN1cnJlbnQgPSBvYmo7XG4gIHBhdGguc3BsaXQoJy4nKS5mb3JFYWNoKChwKSA9PiAoY3VycmVudCA9IGN1cnJlbnRbcF0pKTtcblxuICByZXR1cm4gY3VycmVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYXJhbXMocGFyYW1zOiBSZXNvbHZlUGFyYW1zT3B0aW9uIHwgUmVzb2x2ZVBhcmFtc09wdGlvbltdKSB7XG4gIGNvbnN0IHRvQXJyYXkgPSBjb2VyY2VBcnJheShwYXJhbXMpO1xuXG4gIGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVsbD4gPSB7fTtcblxuICB0b0FycmF5LmZvckVhY2goKHsgZGVmLCB2YWx1ZSB9KSA9PiB7XG4gICAgbGV0IGRlZlZhbHVlOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgaWYgKGRlZi5yZW1vdmVFbXB0eVZhbHVlKSB7XG4gICAgICBkZWZWYWx1ZSA9IGlzRW1wdHlWYWx1ZShkZWYsIHZhbHVlKSA/IG51bGwgOiBkZWYuc2VyaWFsaXplKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmVmFsdWUgPSBkZWYuc2VyaWFsaXplKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXN1bHRbZGVmLnF1ZXJ5S2V5XSA9IGRlZlZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29lcmNlQXJyYXk8VD4odmFsdWU6IFQgfCBUW10pOiBUW10ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZzVG9QYXJhbXMoZGVmczogUXVlcnlQYXJhbURlZltdLCBncm91cDogQWJzdHJhY3RDb250cm9sKSB7XG4gIHJldHVybiBkZWZzLm1hcCgoZGVmKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHF1ZXJ5S2V5OiBkZWYucXVlcnlLZXksXG4gICAgICB2YWx1ZTogZ3JvdXAuZ2V0KGRlZi5wYXRoKSEudmFsdWUsXG4gICAgfTtcbiAgfSk7XG59XG4iXX0=