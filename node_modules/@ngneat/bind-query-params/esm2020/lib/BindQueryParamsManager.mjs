import { merge, Subject } from 'rxjs';
import { coerceArray, get, resolveParams } from './utils';
import { auditTime, map, takeUntil } from 'rxjs/operators';
import { QueryParamDef } from './QueryParamDef';
import set from 'lodash.set';
export class BindQueryParamsManager {
    constructor(router, defs, options, createOptions) {
        this.router = router;
        this.options = options;
        this.createOptions = createOptions;
        this.$destroy = new Subject();
        this.defsSynced = {};
        this.defs = coerceArray(defs).map((def) => new QueryParamDef(def));
    }
    connect(group) {
        this.group = group;
        this.onInit();
        return this;
    }
    onInit() {
        this.handleInitialURLSync();
        this.updateControl(this.defs, { emitEvent: true }, (def) => !!(def.syncInitialQueryParamValue ?? this.createOptions?.syncInitialQueryParamValue));
        const controls = this.defs.map((def) => {
            return this.group.get(def.path).valueChanges.pipe(map((value) => ({
                def,
                value,
            })));
        });
        // Could be a several changes in the same tick,
        // for example when we use reset() or patchValue.
        // We need to aggregate the changes and apply them once
        // because the router navigates in micro task
        let buffer = [];
        merge(...controls)
            .pipe(map((result) => buffer.push(result)), auditTime(0), takeUntil(this.$destroy))
            .subscribe(() => {
            this.updateQueryParams(resolveParams(buffer));
            buffer = [];
        });
    }
    destroy() {
        this.$destroy.next();
    }
    getDef(queryKey) {
        return this.defs.find((def) => def.queryKey === queryKey);
    }
    parse(queryParams) {
        const result = {};
        for (const [key, value] of Object.entries(queryParams)) {
            const def = this.getDef(key);
            if (def) {
                result[key] = def.parse(value);
            }
        }
        return result;
    }
    syncAllDefs(options = { emitEvent: true }) {
        const allKeys = this.defs.map((def) => def.queryKey);
        this.syncDefs(allKeys, options);
    }
    syncDefs(queryKeys, options = { emitEvent: true }) {
        const defs = [];
        coerceArray(queryKeys).forEach((key) => {
            if (!this.defsSynced[key]) {
                this.defsSynced[key] = true;
                const def = this.getDef(key);
                if (def) {
                    defs.push(def);
                }
            }
        });
        if (defs.length) {
            this.updateControl(defs, options);
        }
    }
    paramExists(queryKey) {
        return this.search.has(queryKey);
    }
    someParamExists() {
        return this.defs.some((def) => {
            return this.search.has(def.queryKey);
        });
    }
    get search() {
        return new URLSearchParams(this.options.windowRef.location.search);
    }
    handleInitialURLSync() {
        const initialSyncDefs = [];
        for (const def of this.defs) {
            const syncInitialControlValue = def.syncInitialControlValue ?? this.createOptions?.syncInitialControlValue;
            if (syncInitialControlValue && !this.paramExists(def.queryKey)) {
                initialSyncDefs.push({ def, value: get(this.group.value, def.path) });
            }
        }
        if (initialSyncDefs.length) {
            this.updateQueryParams({
                // The router doesn't know the current query params so
                // we need to add it manually
                ...Object.fromEntries(this.search),
                ...resolveParams(initialSyncDefs),
            });
        }
    }
    updateQueryParams(queryParams) {
        this.router.navigate([], {
            queryParams,
            queryParamsHandling: 'merge',
            replaceUrl: true,
        });
    }
    updateControl(defs, options, updatePredicate = (_) => true) {
        const queryParams = new URLSearchParams(this.options.windowRef.location.search);
        let value = {};
        for (const def of defs) {
            if (updatePredicate(def)) {
                const { queryKey } = def;
                const queryParamValue = queryParams.get(queryKey);
                if (!queryParamValue)
                    continue;
                set(value, def.path.split('.'), def.parse(queryParamValue));
            }
        }
        if (Object.keys(value).length) {
            this.group.patchValue(value, options);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,