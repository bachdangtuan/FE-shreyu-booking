import { parse } from './utils';
export class QueryParamDef {
    constructor(config) {
        this.config = config;
    }
    get queryKey() {
        return this.config.queryKey;
    }
    get path() {
        return this.config.path || this.queryKey;
    }
    get type() {
        return this.config.type || 'string';
    }
    get parser() {
        return this.config.parser;
    }
    get syncInitialControlValue() {
        return this.config.syncInitialControlValue;
    }
    get syncInitialQueryParamValue() {
        return this.config.syncInitialQueryParamValue ?? true;
    }
    get serializer() {
        return this.config.serializer;
    }
    get removeEmptyValue() {
        return this.config.removeEmptyValue === undefined ? true : this.config.removeEmptyValue;
    }
    serialize(controlValue) {
        if (this.serializer) {
            return this.serializer(controlValue);
        }
        if (controlValue === null || controlValue === undefined || controlValue === '') {
            return null;
        }
        const serializedValue = controlValue.toString();
        return serializedValue === '[object Object]' ? JSON.stringify(controlValue) : serializedValue;
    }
    parse(queryParamValue) {
        if (this.parser) {
            return this.parser(queryParamValue);
        }
        return parse(queryParamValue, this.type);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVlcnlQYXJhbURlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9iaW5kLXF1ZXJ5LXBhcmFtcy9zcmMvbGliL1F1ZXJ5UGFyYW1EZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxNQUFNLE9BQU8sYUFBYTtJQUN4QixZQUFvQixNQUFvQztRQUFwQyxXQUFNLEdBQU4sTUFBTSxDQUE4QjtJQUN4RCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzNDLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQztJQUN0QyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSx1QkFBdUI7UUFDekIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFJLDBCQUEwQjtRQUM1QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsMEJBQTBCLElBQUksSUFBSSxDQUFDO0lBQ3hELENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7SUFDMUYsQ0FBQztJQUVELFNBQVMsQ0FBQyxZQUFpQjtRQUN6QixJQUFHLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsSUFBRyxZQUFZLEtBQUssSUFBSSxJQUFJLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxLQUFLLEVBQUUsRUFBRTtZQUM3RSxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsTUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWhELE9BQU8sZUFBZSxLQUFLLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7SUFDaEcsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUF1QjtRQUMzQixJQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDckM7UUFFRCxPQUFPLEtBQUssQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFF1ZXJ5RGVmT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNsYXNzIFF1ZXJ5UGFyYW1EZWY8UXVlcnlQYXJhbXMgPSBhbnk+IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWc6IFF1ZXJ5RGVmT3B0aW9uczxRdWVyeVBhcmFtcz4pIHtcbiAgfVxuXG4gIGdldCBxdWVyeUtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucXVlcnlLZXk7XG4gIH1cblxuICBnZXQgcGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucGF0aCB8fCB0aGlzLnF1ZXJ5S2V5O1xuICB9XG5cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnR5cGUgfHwgJ3N0cmluZyc7XG4gIH1cblxuICBnZXQgcGFyc2VyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wYXJzZXI7XG4gIH1cblxuICBnZXQgc3luY0luaXRpYWxDb250cm9sVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnN5bmNJbml0aWFsQ29udHJvbFZhbHVlO1xuICB9XG5cbiAgZ2V0IHN5bmNJbml0aWFsUXVlcnlQYXJhbVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5zeW5jSW5pdGlhbFF1ZXJ5UGFyYW1WYWx1ZSA/PyB0cnVlO1xuICB9XG5cbiAgZ2V0IHNlcmlhbGl6ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnNlcmlhbGl6ZXI7XG4gIH1cblxuICBnZXQgcmVtb3ZlRW1wdHlWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucmVtb3ZlRW1wdHlWYWx1ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHRoaXMuY29uZmlnLnJlbW92ZUVtcHR5VmFsdWU7XG4gIH1cblxuICBzZXJpYWxpemUoY29udHJvbFZhbHVlOiBhbnkpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBpZih0aGlzLnNlcmlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlcmlhbGl6ZXIoY29udHJvbFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZihjb250cm9sVmFsdWUgPT09IG51bGwgfHwgY29udHJvbFZhbHVlID09PSB1bmRlZmluZWQgfHwgY29udHJvbFZhbHVlID09PSAnJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VyaWFsaXplZFZhbHVlID0gY29udHJvbFZhbHVlLnRvU3RyaW5nKCk7XG5cbiAgICByZXR1cm4gc2VyaWFsaXplZFZhbHVlID09PSAnW29iamVjdCBPYmplY3RdJyA/IEpTT04uc3RyaW5naWZ5KGNvbnRyb2xWYWx1ZSkgOiBzZXJpYWxpemVkVmFsdWU7XG4gIH1cblxuICBwYXJzZShxdWVyeVBhcmFtVmFsdWU6IHN0cmluZykge1xuICAgIGlmKHRoaXMucGFyc2VyKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZXIocXVlcnlQYXJhbVZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2UocXVlcnlQYXJhbVZhbHVlLCB0aGlzLnR5cGUpO1xuICB9XG59XG4iXX0=