{"ast":null,"code":"export class DateTimeModel {\n  constructor(init) {\n    Object.assign(this, init);\n  }\n  static fromLocalString(dateString) {\n    const date = new Date(dateString);\n    const isValidDate = !isNaN(date.valueOf());\n    if (!dateString || !isValidDate) {\n      // @ts-ignore\n      return null;\n    }\n    return new DateTimeModel({\n      year: date.getFullYear(),\n      month: date.getMonth() + 1,\n      day: date.getDate(),\n      hour: date.getHours(),\n      minute: date.getMinutes(),\n      second: date.getSeconds(),\n      timeZoneOffset: date.getTimezoneOffset()\n    });\n  }\n  isInteger(value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n  }\n  toString() {\n    if (this.isInteger(this.year) && this.isInteger(this.month) && this.isInteger(this.day)) {\n      const year = this.year.toString().padStart(2, '0');\n      const month = this.month.toString().padStart(2, '0');\n      const day = this.day.toString().padStart(2, '0');\n      if (!this.hour) {\n        this.hour = 0;\n      }\n      if (!this.minute) {\n        this.minute = 0;\n      }\n      if (!this.second) {\n        this.second = 0;\n      }\n      if (!this.timeZoneOffset) {\n        this.timeZoneOffset = new Date().getTimezoneOffset();\n      }\n      const hour = this.hour.toString().padStart(2, '0');\n      const minute = this.minute.toString().padStart(2, '0');\n      const second = this.second.toString().padStart(2, '0');\n      const tzo = -this.timeZoneOffset;\n      const dif = tzo >= 0 ? '+' : '-',\n        pad = function (num) {\n          const norm = Math.floor(Math.abs(num));\n          return (norm < 10 ? '0' : '') + norm;\n        };\n      const isoString = `${pad(year)}-${pad(month)}-${pad(day)}T${pad(hour)}:${pad(minute)}:${pad(second)}${dif}${pad(tzo / 60)}:${pad(tzo % 60)}`;\n      return isoString;\n    }\n    // @ts-ignore\n    return null;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}