{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let EventService = /*#__PURE__*/(() => {\n  class EventService {\n    constructor() {\n      this.handler = new Subject();\n    }\n    /**\r\n     * Broadcast the event\r\n     * @param type type of event\r\n     * @param payload payload\r\n     */\n    broadcast(type, payload = \"\") {\n      this.handler.next({\n        type,\n        payload\n      });\n    }\n    /**\r\n     * Subscribe to event\r\n     * @param eventType type of event\r\n     */\n    on(eventType) {\n      return this.handler.pipe(filter(event => event.type === eventType));\n    }\n  }\n  EventService.ɵfac = function EventService_Factory(t) {\n    return new (t || EventService)();\n  };\n  EventService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventService,\n    factory: EventService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventService;\n})();","map":null,"metadata":{},"sourceType":"module"}