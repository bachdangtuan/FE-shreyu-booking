{"ast":null,"code":"import { ActivatedRoute, Router } from \"@angular/router\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nexport function SyncQueryParam(config = {\n  parseIgnore: []\n}) {\n  return function (target, propertyKey) {\n    let srcSearchObj;\n    let activatedRoute;\n    let router;\n    const ngOnInitUnPatched = target.ngOnInit;\n    target.ngOnInit = function () {\n      var _a, _b, _c;\n      activatedRoute = this.injector.get(ActivatedRoute);\n      router = this.injector.get(Router);\n      // sync form to params\n      if (target[propertyKey] instanceof FormGroup && target[propertyKey]) {\n        target[propertyKey].valueChanges.subscribe(v => {\n          syncObjectToParams(activatedRoute, router, v);\n        });\n        const objectSearchParams = (_a = target[propertyKey]) === null || _a === void 0 ? void 0 : _a.getRawValue();\n        const activeQueryParams = activatedRoute.snapshot.queryParams;\n        if (((_b = Object.keys(objectSearchParams)) === null || _b === void 0 ? void 0 : _b.length) && !((_c = Object.keys(activeQueryParams)) === null || _c === void 0 ? void 0 : _c.length)) {\n          syncObjectToParams(activatedRoute, router, objectSearchParams);\n        }\n      }\n      // subscribe URL params change to sync search form\n      activatedRoute.queryParams.subscribe(params => {\n        var _a;\n        const searchObjParams = srcSearchObj.getRawValue();\n        const tmp = JSON.parse(JSON.stringify(params));\n        const _params = Object.assign(Object.assign({}, searchObjParams), tmp);\n        (_a = Object.keys(_params)) === null || _a === void 0 ? void 0 : _a.forEach(k => {\n          var _a, _b, _c, _d;\n          if (_params[k] && ((_a = _params[k]) === null || _a === void 0 ? void 0 : _a.indexOf(\";\")) !== -1) {\n            _params[k] = (_b = _params[k]) === null || _b === void 0 ? void 0 : _b.split(\";\");\n            _params[k] = (_c = _params[k]) === null || _c === void 0 ? void 0 : _c.filter(i => !!i);\n            const _isTypeNumber = typeof _params[k] === \"number\";\n            if (_isTypeNumber) _params[k] = (_d = _params[k]) === null || _d === void 0 ? void 0 : _d.map(i => isNaN(i) ? i : +i);\n          } else {\n            if (!config.parseIgnore.includes(k)) {\n              _params[k] = isNaN(_params[k]) || !_params[k] ? _params[k] : +_params[k];\n            }\n          }\n        });\n        if (target[propertyKey] instanceof FormGroup && target[propertyKey]) {\n          target[propertyKey].patchValue(_params, {\n            emitEvent: false\n          });\n          if (typeof _params === \"object\" && Object.keys(_params).length > 0) {\n            if (target[propertyKey].get(\"skipDefaultValue\")) {\n              target[propertyKey].get(\"skipDefaultValue\").setValue(true);\n            } else {\n              target[propertyKey].addControl(\"skipDefaultValue\", new FormControl(true));\n            }\n          }\n        } else if (typeof target[propertyKey] === \"object\") {\n          target[propertyKey] = _params;\n        }\n      });\n      if (ngOnInitUnPatched) {\n        return ngOnInitUnPatched.call(this);\n      }\n    };\n    function getter() {\n      return srcSearchObj;\n    }\n    function setter(value) {\n      srcSearchObj = value;\n    }\n    Object.defineProperty(target, propertyKey, {\n      get: getter,\n      set: setter,\n      enumerable: true,\n      configurable: true\n    });\n  };\n}\nfunction syncObjectToParams(activatedRoute, router, obj) {\n  if (activatedRoute) {\n    const params = {};\n    buildHTTPGetParamsFromObject(obj, params);\n    router.navigate([\".\"], {\n      relativeTo: activatedRoute,\n      queryParams: params\n    }).then();\n  }\n}\nexport function buildHTTPGetParamsFromObject(obj, params) {\n  params = params || {};\n  Object.keys(obj).forEach(key => {\n    const controlValue = obj[key];\n    if (Array.isArray(controlValue) && controlValue.length > 0) {\n      params[key] = \"\";\n      controlValue.forEach(v => {\n        params[key] += v + \";\";\n      });\n      return;\n    }\n    if (controlValue instanceof Date) {\n      // params[key] = toISOStringWithoutTimeZone(controlValue).toISOString();\n      params[key] = controlValue.toISOString();\n    } else if (typeof controlValue === \"object\" && controlValue) {\n      buildHTTPGetParamsFromObject(controlValue, params);\n    } else if (controlValue !== null) {\n      params[key] = controlValue;\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}