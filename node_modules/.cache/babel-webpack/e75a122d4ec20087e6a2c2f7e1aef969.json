{"ast":null,"code":"import { LayoutEventType } from '../core/constants/events';\nimport { LAYOUT_DETACHED, LAYOUT_HORIZONTAL, LAYOUT_TWO_COLUMN_MENU, LAYOUT_VERTICAL, LAYOUT_WIDTH_BOXED, LEFT_SIDEBAR_TYPE_CONDENSED, LEFT_SIDEBAR_TYPE_DEFAULT } from './shared/config/layout.model';\nimport { getLayoutConfig } from './shared/helper/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/service/event.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"./vertical/layout/layout.component\";\nfunction LayoutContainerComponent_app_vertical_layout_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-vertical-layout\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"layoutWidth\", ctx_r0.layoutWidth);\n  }\n}\nexport let LayoutContainerComponent = /*#__PURE__*/(() => {\n  class LayoutContainerComponent {\n    constructor(eventService) {\n      this.eventService = eventService;\n    }\n    ngOnInit() {\n      this.layoutType = sessionStorage.getItem(\"Layout_Type\") || LAYOUT_VERTICAL;\n      this.setLayoutConfig();\n      // listen to event and change the layout configuarations\n      this.eventService.on(LayoutEventType.CHANGE_LAYOUT).subscribe(({\n        payload\n      }) => {\n        this.layoutType = payload;\n        this.setLayoutConfig();\n      });\n      this.eventService.on(LayoutEventType.CHANGE_LAYOUT_WIDTH).subscribe(({\n        payload\n      }) => {\n        setTimeout(() => {\n          this.layoutWidth = payload;\n          if (this.layoutWidth === LAYOUT_WIDTH_BOXED) {\n            this.eventService.broadcast(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, LEFT_SIDEBAR_TYPE_CONDENSED);\n          } else {\n            this.eventService.broadcast(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, LEFT_SIDEBAR_TYPE_DEFAULT);\n          }\n        }, 20);\n      });\n    }\n    ngAfterViewInit() {\n      document.body.classList.remove('authentication-bg');\n      if (sessionStorage.getItem(\"Layout_Type\")) sessionStorage.removeItem(\"Layout_Type\");\n      if (sessionStorage.getItem(\"Leftsidebar_Theme\")) sessionStorage.removeItem(\"Leftsidebar_Theme\");\n      if (sessionStorage.getItem(\"Layout_Width\")) sessionStorage.removeItem(\"Layout_Width\");\n      if (sessionStorage.getItem(\"Leftsidebar_Type\")) sessionStorage.removeItem(\"Leftsidebar_Type\");\n      if (sessionStorage.getItem(\"Menu_Position\")) sessionStorage.removeItem(\"Menu_Position\");\n      if (sessionStorage.getItem(\"Topbar_Theme\")) sessionStorage.removeItem(\"Topbar_Theme\");\n    }\n    /**\r\n     * set layout config\r\n     */\n    setLayoutConfig() {\n      this.layoutConfig = getLayoutConfig(this.layoutType);\n      this.layoutWidth = this.layoutConfig.layoutWidth;\n    }\n    /**\r\n     * Check if the vertical layout is requested\r\n     */\n    isVerticalLayoutRequested() {\n      return this.layoutType === LAYOUT_VERTICAL;\n    }\n    /**\r\n     * Check if the horizontal layout is requested\r\n     */\n    isHorizontalLayoutRequested() {\n      return this.layoutType === LAYOUT_HORIZONTAL;\n    }\n    /**\r\n     * Check if the detached layout is requested\r\n     */\n    isDetachedLayoutRequested() {\n      return this.layoutType === LAYOUT_DETACHED;\n    }\n    /**\r\n     * Check if two column layout is requested\r\n     */\n    isTwoColumnMenuLayoutRequested() {\n      return this.layoutType === LAYOUT_TWO_COLUMN_MENU;\n    }\n  }\n  LayoutContainerComponent.ɵfac = function LayoutContainerComponent_Factory(t) {\n    return new (t || LayoutContainerComponent)(i0.ɵɵdirectiveInject(i1.EventService));\n  };\n  LayoutContainerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LayoutContainerComponent,\n    selectors: [[\"app-layout-container\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"layoutWidth\", 4, \"ngIf\"], [3, \"layoutWidth\"]],\n    template: function LayoutContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, LayoutContainerComponent_app_vertical_layout_0_Template, 1, 1, \"app-vertical-layout\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isVerticalLayoutRequested());\n      }\n    },\n    directives: [i2.NgIf, i3.VerticalLayoutComponent],\n    styles: [\"\"]\n  });\n  return LayoutContainerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}