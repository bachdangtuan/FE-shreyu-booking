# .github/workflows/cicd.yml
name: CI/CD Development Dev

env:
  REGISTRY_REPO: 824823798361.dkr.ecr.ap-southeast-1.amazonaws.com
  REGISTRY_NAME: shreyu-crm
  REGION: ap-southeast-1

on:
  push:
    branches: ["develop"]
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

        # Truy cập vào AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
          mask-aws-account-id: "no"
      # Login và push image lên AWS_ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build tag và push code
      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -f Dockerfile -t $REGISTRY/$REGISTRY_NAME:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_NAME:$IMAGE_TAG

#    outputs:
#      output1: ${{ steps.login-ecr.outputs.registry }}
#
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#
#    steps:
#      # Execute các lệnh cho EC2
#      - name: executing remote ssh commands using ssh key
#        uses: appleboy/ssh-action@master
#        # Lấy các variables
#        env:
#          REGISTRY: ${{ needs.build.outputs.output1 }}
#          IMAGE_TAG: latest
#        with:
#          host: ${{ secrets.HOST_NAME }}
#          username: ${{ secrets.USER_NAME }}
#          key: ${{ secrets.AWS_PRIVATE_KEY }}
#          envs: REGISTRY_NAME,IMAGE_TAG,REGION,REGISTRY_REPO,REGISTRY
#          script: |
#            echo "AWS login => $REGISTRY"
#            aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY_REPO
#            echo "AWS pull the latest image"
#            docker pull $REGISTRY/$REGISTRY_NAME:$IMAGE_TAG
#            echo "Kill container running"
#            docker kill $(docker ps -q)
#            echo "Run docker container"
#            docker run -d -p 8080:80 $REGISTRY/$REGISTRY_NAME:$IMAGE_TAG
